input UserRelateToManyInput {
  create: [UserCreateInput]
  connect: [UserWhereUniqueInput]
  disconnect: [UserWhereUniqueInput]
  disconnectAll: Boolean
}

"""
 A keystone list
"""
type Role {
  id: ID!
  name: String
  canManageProducts: Boolean
  canSeeOtherUsers: Boolean
  canManageUsers: Boolean
  canManageRoles: Boolean
  canManageCart: Boolean
  canManageOrgs: Boolean
  assignedTo(
    where: UserWhereInput! = {}
    search: String
    sortBy: [SortUsersBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [UserOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [User!]!
  _assignedToMeta(
    where: UserWhereInput! = {}
    search: String
    sortBy: [SortUsersBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [UserOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use assignedToCount instead."
    )
  assignedToCount(where: UserWhereInput! = {}): Int
}

input RoleWhereInput {
  AND: [RoleWhereInput!]
  OR: [RoleWhereInput!]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID]
  id_not_in: [ID]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_i: String
  name_not_i: String
  name_contains_i: String
  name_not_contains_i: String
  name_starts_with_i: String
  name_not_starts_with_i: String
  name_ends_with_i: String
  name_not_ends_with_i: String
  name_in: [String]
  name_not_in: [String]
  canManageProducts: Boolean
  canManageProducts_not: Boolean
  canSeeOtherUsers: Boolean
  canSeeOtherUsers_not: Boolean
  canManageUsers: Boolean
  canManageUsers_not: Boolean
  canManageRoles: Boolean
  canManageRoles_not: Boolean
  canManageCart: Boolean
  canManageCart_not: Boolean
  canManageOrgs: Boolean
  canManageOrgs_not: Boolean

  """
   condition must be true for all nodes
  """
  assignedTo_every: UserWhereInput

  """
   condition must be true for at least 1 node
  """
  assignedTo_some: UserWhereInput

  """
   condition must be false for all nodes
  """
  assignedTo_none: UserWhereInput
}

input RoleWhereUniqueInput {
  id: ID!
}

enum SortRolesBy {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  canManageProducts_ASC
  canManageProducts_DESC
  canSeeOtherUsers_ASC
  canSeeOtherUsers_DESC
  canManageUsers_ASC
  canManageUsers_DESC
  canManageRoles_ASC
  canManageRoles_DESC
  canManageCart_ASC
  canManageCart_DESC
  canManageOrgs_ASC
  canManageOrgs_DESC
}

input RoleOrderByInput {
  id: OrderDirection
  name: OrderDirection
  canManageProducts: OrderDirection
  canSeeOtherUsers: OrderDirection
  canManageUsers: OrderDirection
  canManageRoles: OrderDirection
  canManageCart: OrderDirection
  canManageOrgs: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input RoleUpdateInput {
  name: String
  canManageProducts: Boolean
  canSeeOtherUsers: Boolean
  canManageUsers: Boolean
  canManageRoles: Boolean
  canManageCart: Boolean
  canManageOrgs: Boolean
  assignedTo: UserRelateToManyInput
}

input RolesUpdateInput {
  id: ID!
  data: RoleUpdateInput
}

input RoleCreateInput {
  name: String
  canManageProducts: Boolean
  canSeeOtherUsers: Boolean
  canManageUsers: Boolean
  canManageRoles: Boolean
  canManageCart: Boolean
  canManageOrgs: Boolean
  assignedTo: UserRelateToManyInput
}

input RolesCreateInput {
  data: RoleCreateInput
}

input RoleRelateToOneInput {
  create: RoleCreateInput
  connect: RoleWhereUniqueInput
  disconnect: RoleWhereUniqueInput
  disconnectAll: Boolean
}

"""
 A keystone list
"""
type User {
  id: ID!
  name: String
  email: String
  password_is_set: Boolean
  subjectId: String
  role: Role
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID]
  id_not_in: [ID]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_i: String
  name_not_i: String
  name_contains_i: String
  name_not_contains_i: String
  name_starts_with_i: String
  name_not_starts_with_i: String
  name_ends_with_i: String
  name_not_ends_with_i: String
  name_in: [String]
  name_not_in: [String]
  email: String
  email_not: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  email_i: String
  email_not_i: String
  email_contains_i: String
  email_not_contains_i: String
  email_starts_with_i: String
  email_not_starts_with_i: String
  email_ends_with_i: String
  email_not_ends_with_i: String
  email_in: [String]
  email_not_in: [String]
  password_is_set: Boolean
  subjectId: String
  subjectId_not: String
  subjectId_contains: String
  subjectId_not_contains: String
  subjectId_starts_with: String
  subjectId_not_starts_with: String
  subjectId_ends_with: String
  subjectId_not_ends_with: String
  subjectId_i: String
  subjectId_not_i: String
  subjectId_contains_i: String
  subjectId_not_contains_i: String
  subjectId_starts_with_i: String
  subjectId_not_starts_with_i: String
  subjectId_ends_with_i: String
  subjectId_not_ends_with_i: String
  subjectId_in: [String]
  subjectId_not_in: [String]
  role: RoleWhereInput
  role_is_null: Boolean
}

input UserWhereUniqueInput {
  id: ID!
}

enum SortUsersBy {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  subjectId_ASC
  subjectId_DESC
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  subjectId: OrderDirection
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  subjectId: String
  role: RoleRelateToOneInput
}

input UsersUpdateInput {
  id: ID!
  data: UserUpdateInput
}

input UserCreateInput {
  name: String
  email: String
  password: String
  subjectId: String
  role: RoleRelateToOneInput
}

input UsersCreateInput {
  data: UserCreateInput
}

input FieldRelateToManyInput {
  create: [FieldCreateInput]
  connect: [FieldWhereUniqueInput]
  disconnect: [FieldWhereUniqueInput]
  disconnectAll: Boolean
}

input FieldRelateToOneInput {
  create: FieldCreateInput
  connect: FieldWhereUniqueInput
  disconnect: FieldWhereUniqueInput
  disconnectAll: Boolean
}

input AppRelateToOneInput {
  create: AppCreateInput
  connect: AppWhereUniqueInput
  disconnect: AppWhereUniqueInput
  disconnectAll: Boolean
}

input AccessControlRelateToOneInput {
  create: AccessControlCreateInput
  connect: AccessControlWhereUniqueInput
  disconnect: AccessControlWhereUniqueInput
  disconnectAll: Boolean
}

input HookRelateToOneInput {
  create: HookCreateInput
  connect: HookWhereUniqueInput
  disconnect: HookWhereUniqueInput
  disconnectAll: Boolean
}

"""
 A keystone list
"""
type List {
  id: ID!
  name: String
  fields(
    where: FieldWhereInput! = {}
    search: String
    sortBy: [SortFieldsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [FieldOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Field!]!
  _fieldsMeta(
    where: FieldWhereInput! = {}
    search: String
    sortBy: [SortFieldsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [FieldOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use fieldsCount instead."
    )
  fieldsCount(where: FieldWhereInput! = {}): Int
  idField: Field
  app: App
  accessControls: AccessControl
  hooks: Hook
}

input ListWhereInput {
  AND: [ListWhereInput!]
  OR: [ListWhereInput!]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID]
  id_not_in: [ID]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_i: String
  name_not_i: String
  name_contains_i: String
  name_not_contains_i: String
  name_starts_with_i: String
  name_not_starts_with_i: String
  name_ends_with_i: String
  name_not_ends_with_i: String
  name_in: [String]
  name_not_in: [String]

  """
   condition must be true for all nodes
  """
  fields_every: FieldWhereInput

  """
   condition must be true for at least 1 node
  """
  fields_some: FieldWhereInput

  """
   condition must be false for all nodes
  """
  fields_none: FieldWhereInput
  idField: FieldWhereInput
  idField_is_null: Boolean
  app: AppWhereInput
  app_is_null: Boolean
  accessControls: AccessControlWhereInput
  accessControls_is_null: Boolean
  hooks: HookWhereInput
  hooks_is_null: Boolean
}

input ListWhereUniqueInput {
  id: ID!
}

enum SortListsBy {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

input ListOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input ListUpdateInput {
  name: String
  fields: FieldRelateToManyInput
  idField: FieldRelateToOneInput
  app: AppRelateToOneInput
  accessControls: AccessControlRelateToOneInput
  hooks: HookRelateToOneInput
}

input ListsUpdateInput {
  id: ID!
  data: ListUpdateInput
}

input ListCreateInput {
  name: String
  fields: FieldRelateToManyInput
  idField: FieldRelateToOneInput
  app: AppRelateToOneInput
  accessControls: AccessControlRelateToOneInput
  hooks: HookRelateToOneInput
}

input ListsCreateInput {
  data: ListCreateInput
}

input ListRelateToOneInput {
  create: ListCreateInput
  connect: ListWhereUniqueInput
  disconnect: ListWhereUniqueInput
  disconnectAll: Boolean
}

"""
 A keystone list
"""
type Field {
  id: ID!
  name: String
  list: List
  label: String
  type: String
  hooks: Hook
  accessControls: AccessControl
  functionLocation: String
  functionName: String
  isRequired: Boolean
  isUnique: Boolean
}

input FieldWhereInput {
  AND: [FieldWhereInput!]
  OR: [FieldWhereInput!]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID]
  id_not_in: [ID]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_i: String
  name_not_i: String
  name_contains_i: String
  name_not_contains_i: String
  name_starts_with_i: String
  name_not_starts_with_i: String
  name_ends_with_i: String
  name_not_ends_with_i: String
  name_in: [String]
  name_not_in: [String]
  list: ListWhereInput
  list_is_null: Boolean
  label: String
  label_not: String
  label_contains: String
  label_not_contains: String
  label_starts_with: String
  label_not_starts_with: String
  label_ends_with: String
  label_not_ends_with: String
  label_i: String
  label_not_i: String
  label_contains_i: String
  label_not_contains_i: String
  label_starts_with_i: String
  label_not_starts_with_i: String
  label_ends_with_i: String
  label_not_ends_with_i: String
  label_in: [String]
  label_not_in: [String]
  type: String
  type_not: String
  type_in: [String]
  type_not_in: [String]
  hooks: HookWhereInput
  hooks_is_null: Boolean
  accessControls: AccessControlWhereInput
  accessControls_is_null: Boolean
  functionLocation: String
  functionLocation_not: String
  functionLocation_contains: String
  functionLocation_not_contains: String
  functionLocation_starts_with: String
  functionLocation_not_starts_with: String
  functionLocation_ends_with: String
  functionLocation_not_ends_with: String
  functionLocation_i: String
  functionLocation_not_i: String
  functionLocation_contains_i: String
  functionLocation_not_contains_i: String
  functionLocation_starts_with_i: String
  functionLocation_not_starts_with_i: String
  functionLocation_ends_with_i: String
  functionLocation_not_ends_with_i: String
  functionLocation_in: [String]
  functionLocation_not_in: [String]
  functionName: String
  functionName_not: String
  functionName_contains: String
  functionName_not_contains: String
  functionName_starts_with: String
  functionName_not_starts_with: String
  functionName_ends_with: String
  functionName_not_ends_with: String
  functionName_i: String
  functionName_not_i: String
  functionName_contains_i: String
  functionName_not_contains_i: String
  functionName_starts_with_i: String
  functionName_not_starts_with_i: String
  functionName_ends_with_i: String
  functionName_not_ends_with_i: String
  functionName_in: [String]
  functionName_not_in: [String]
  isRequired: Boolean
  isRequired_not: Boolean
  isUnique: Boolean
  isUnique_not: Boolean
}

input FieldWhereUniqueInput {
  id: ID!
}

enum SortFieldsBy {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  label_ASC
  label_DESC
  type_ASC
  type_DESC
  functionLocation_ASC
  functionLocation_DESC
  functionName_ASC
  functionName_DESC
  isRequired_ASC
  isRequired_DESC
  isUnique_ASC
  isUnique_DESC
}

input FieldOrderByInput {
  id: OrderDirection
  name: OrderDirection
  label: OrderDirection
  type: OrderDirection
  functionLocation: OrderDirection
  functionName: OrderDirection
  isRequired: OrderDirection
  isUnique: OrderDirection
}

input FieldUpdateInput {
  name: String
  list: ListRelateToOneInput
  label: String
  type: String
  hooks: HookRelateToOneInput
  accessControls: AccessControlRelateToOneInput
  functionLocation: String
  functionName: String
  isRequired: Boolean
  isUnique: Boolean
}

input FieldsUpdateInput {
  id: ID!
  data: FieldUpdateInput
}

input FieldCreateInput {
  name: String
  list: ListRelateToOneInput
  label: String
  type: String
  hooks: HookRelateToOneInput
  accessControls: AccessControlRelateToOneInput
  functionLocation: String
  functionName: String
  isRequired: Boolean
  isUnique: Boolean
}

input FieldsCreateInput {
  data: FieldCreateInput
}

input ListRelateToManyInput {
  create: [ListCreateInput]
  connect: [ListWhereUniqueInput]
  disconnect: [ListWhereUniqueInput]
  disconnectAll: Boolean
}

"""
 A keystone list
"""
type App {
  id: ID!
  name: String
  lists(
    where: ListWhereInput! = {}
    search: String
    sortBy: [SortListsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [ListOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [List!]!
  _listsMeta(
    where: ListWhereInput! = {}
    search: String
    sortBy: [SortListsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [ListOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use listsCount instead."
    )
  listsCount(where: ListWhereInput! = {}): Int
}

input AppWhereInput {
  AND: [AppWhereInput!]
  OR: [AppWhereInput!]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID]
  id_not_in: [ID]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_i: String
  name_not_i: String
  name_contains_i: String
  name_not_contains_i: String
  name_starts_with_i: String
  name_not_starts_with_i: String
  name_ends_with_i: String
  name_not_ends_with_i: String
  name_in: [String]
  name_not_in: [String]

  """
   condition must be true for all nodes
  """
  lists_every: ListWhereInput

  """
   condition must be true for at least 1 node
  """
  lists_some: ListWhereInput

  """
   condition must be false for all nodes
  """
  lists_none: ListWhereInput
}

input AppWhereUniqueInput {
  id: ID!
}

enum SortAppsBy {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

input AppOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input AppUpdateInput {
  name: String
  lists: ListRelateToManyInput
}

input AppsUpdateInput {
  id: ID!
  data: AppUpdateInput
}

input AppCreateInput {
  name: String
  lists: ListRelateToManyInput
}

input AppsCreateInput {
  data: AppCreateInput
}

"""
 A keystone list
"""
type AccessControl {
  id: ID!
  name: String
  control: String
  functionLocation: String
  functionName: String
}

input AccessControlWhereInput {
  AND: [AccessControlWhereInput!]
  OR: [AccessControlWhereInput!]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID]
  id_not_in: [ID]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_i: String
  name_not_i: String
  name_contains_i: String
  name_not_contains_i: String
  name_starts_with_i: String
  name_not_starts_with_i: String
  name_ends_with_i: String
  name_not_ends_with_i: String
  name_in: [String]
  name_not_in: [String]
  control: String
  control_not: String
  control_in: [String]
  control_not_in: [String]
  functionLocation: String
  functionLocation_not: String
  functionLocation_contains: String
  functionLocation_not_contains: String
  functionLocation_starts_with: String
  functionLocation_not_starts_with: String
  functionLocation_ends_with: String
  functionLocation_not_ends_with: String
  functionLocation_i: String
  functionLocation_not_i: String
  functionLocation_contains_i: String
  functionLocation_not_contains_i: String
  functionLocation_starts_with_i: String
  functionLocation_not_starts_with_i: String
  functionLocation_ends_with_i: String
  functionLocation_not_ends_with_i: String
  functionLocation_in: [String]
  functionLocation_not_in: [String]
  functionName: String
  functionName_not: String
  functionName_contains: String
  functionName_not_contains: String
  functionName_starts_with: String
  functionName_not_starts_with: String
  functionName_ends_with: String
  functionName_not_ends_with: String
  functionName_i: String
  functionName_not_i: String
  functionName_contains_i: String
  functionName_not_contains_i: String
  functionName_starts_with_i: String
  functionName_not_starts_with_i: String
  functionName_ends_with_i: String
  functionName_not_ends_with_i: String
  functionName_in: [String]
  functionName_not_in: [String]
}

input AccessControlWhereUniqueInput {
  id: ID!
}

enum SortAccessControlsBy {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  control_ASC
  control_DESC
  functionLocation_ASC
  functionLocation_DESC
  functionName_ASC
  functionName_DESC
}

input AccessControlOrderByInput {
  id: OrderDirection
  name: OrderDirection
  control: OrderDirection
  functionLocation: OrderDirection
  functionName: OrderDirection
}

input AccessControlUpdateInput {
  name: String
  control: String
  functionLocation: String
  functionName: String
}

input AccessControlsUpdateInput {
  id: ID!
  data: AccessControlUpdateInput
}

input AccessControlCreateInput {
  name: String
  control: String
  functionLocation: String
  functionName: String
}

input AccessControlsCreateInput {
  data: AccessControlCreateInput
}

"""
 A keystone list
"""
type Hook {
  id: ID!
  name: String
  stage: String
  functionLocation: String
  functionName: String
}

input HookWhereInput {
  AND: [HookWhereInput!]
  OR: [HookWhereInput!]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID]
  id_not_in: [ID]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_i: String
  name_not_i: String
  name_contains_i: String
  name_not_contains_i: String
  name_starts_with_i: String
  name_not_starts_with_i: String
  name_ends_with_i: String
  name_not_ends_with_i: String
  name_in: [String]
  name_not_in: [String]
  stage: String
  stage_not: String
  stage_in: [String]
  stage_not_in: [String]
  functionLocation: String
  functionLocation_not: String
  functionLocation_contains: String
  functionLocation_not_contains: String
  functionLocation_starts_with: String
  functionLocation_not_starts_with: String
  functionLocation_ends_with: String
  functionLocation_not_ends_with: String
  functionLocation_i: String
  functionLocation_not_i: String
  functionLocation_contains_i: String
  functionLocation_not_contains_i: String
  functionLocation_starts_with_i: String
  functionLocation_not_starts_with_i: String
  functionLocation_ends_with_i: String
  functionLocation_not_ends_with_i: String
  functionLocation_in: [String]
  functionLocation_not_in: [String]
  functionName: String
  functionName_not: String
  functionName_contains: String
  functionName_not_contains: String
  functionName_starts_with: String
  functionName_not_starts_with: String
  functionName_ends_with: String
  functionName_not_ends_with: String
  functionName_i: String
  functionName_not_i: String
  functionName_contains_i: String
  functionName_not_contains_i: String
  functionName_starts_with_i: String
  functionName_not_starts_with_i: String
  functionName_ends_with_i: String
  functionName_not_ends_with_i: String
  functionName_in: [String]
  functionName_not_in: [String]
}

input HookWhereUniqueInput {
  id: ID!
}

enum SortHooksBy {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  stage_ASC
  stage_DESC
  functionLocation_ASC
  functionLocation_DESC
  functionName_ASC
  functionName_DESC
}

input HookOrderByInput {
  id: OrderDirection
  name: OrderDirection
  stage: OrderDirection
  functionLocation: OrderDirection
  functionName: OrderDirection
}

input HookUpdateInput {
  name: String
  stage: String
  functionLocation: String
  functionName: String
}

input HooksUpdateInput {
  id: ID!
  data: HookUpdateInput
}

input HookCreateInput {
  name: String
  stage: String
  functionLocation: String
  functionName: String
}

input HooksCreateInput {
  data: HookCreateInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type _QueryMeta {
  count: Int
}

type Mutation {
  """
   Create a single Role item.
  """
  createRole(data: RoleCreateInput): Role

  """
   Create multiple Role items.
  """
  createRoles(data: [RolesCreateInput]): [Role]

  """
   Update a single Role item by ID.
  """
  updateRole(id: ID!, data: RoleUpdateInput): Role

  """
   Update multiple Role items by ID.
  """
  updateRoles(data: [RolesUpdateInput]): [Role]

  """
   Delete a single Role item by ID.
  """
  deleteRole(id: ID!): Role

  """
   Delete multiple Role items by ID.
  """
  deleteRoles(ids: [ID!]): [Role]

  """
   Create a single User item.
  """
  createUser(data: UserCreateInput): User

  """
   Create multiple User items.
  """
  createUsers(data: [UsersCreateInput]): [User]

  """
   Update a single User item by ID.
  """
  updateUser(id: ID!, data: UserUpdateInput): User

  """
   Update multiple User items by ID.
  """
  updateUsers(data: [UsersUpdateInput]): [User]

  """
   Delete a single User item by ID.
  """
  deleteUser(id: ID!): User

  """
   Delete multiple User items by ID.
  """
  deleteUsers(ids: [ID!]): [User]

  """
   Create a single List item.
  """
  createList(data: ListCreateInput): List

  """
   Create multiple List items.
  """
  createLists(data: [ListsCreateInput]): [List]

  """
   Update a single List item by ID.
  """
  updateList(id: ID!, data: ListUpdateInput): List

  """
   Update multiple List items by ID.
  """
  updateLists(data: [ListsUpdateInput]): [List]

  """
   Delete a single List item by ID.
  """
  deleteList(id: ID!): List

  """
   Delete multiple List items by ID.
  """
  deleteLists(ids: [ID!]): [List]

  """
   Create a single Field item.
  """
  createField(data: FieldCreateInput): Field

  """
   Create multiple Field items.
  """
  createFields(data: [FieldsCreateInput]): [Field]

  """
   Update a single Field item by ID.
  """
  updateField(id: ID!, data: FieldUpdateInput): Field

  """
   Update multiple Field items by ID.
  """
  updateFields(data: [FieldsUpdateInput]): [Field]

  """
   Delete a single Field item by ID.
  """
  deleteField(id: ID!): Field

  """
   Delete multiple Field items by ID.
  """
  deleteFields(ids: [ID!]): [Field]

  """
   Create a single App item.
  """
  createApp(data: AppCreateInput): App

  """
   Create multiple App items.
  """
  createApps(data: [AppsCreateInput]): [App]

  """
   Update a single App item by ID.
  """
  updateApp(id: ID!, data: AppUpdateInput): App

  """
   Update multiple App items by ID.
  """
  updateApps(data: [AppsUpdateInput]): [App]

  """
   Delete a single App item by ID.
  """
  deleteApp(id: ID!): App

  """
   Delete multiple App items by ID.
  """
  deleteApps(ids: [ID!]): [App]

  """
   Create a single AccessControl item.
  """
  createAccessControl(data: AccessControlCreateInput): AccessControl

  """
   Create multiple AccessControl items.
  """
  createAccessControls(data: [AccessControlsCreateInput]): [AccessControl]

  """
   Update a single AccessControl item by ID.
  """
  updateAccessControl(id: ID!, data: AccessControlUpdateInput): AccessControl

  """
   Update multiple AccessControl items by ID.
  """
  updateAccessControls(data: [AccessControlsUpdateInput]): [AccessControl]

  """
   Delete a single AccessControl item by ID.
  """
  deleteAccessControl(id: ID!): AccessControl

  """
   Delete multiple AccessControl items by ID.
  """
  deleteAccessControls(ids: [ID!]): [AccessControl]

  """
   Create a single Hook item.
  """
  createHook(data: HookCreateInput): Hook

  """
   Create multiple Hook items.
  """
  createHooks(data: [HooksCreateInput]): [Hook]

  """
   Update a single Hook item by ID.
  """
  updateHook(id: ID!, data: HookUpdateInput): Hook

  """
   Update multiple Hook items by ID.
  """
  updateHooks(data: [HooksUpdateInput]): [Hook]

  """
   Delete a single Hook item by ID.
  """
  deleteHook(id: ID!): Hook

  """
   Delete multiple Hook items by ID.
  """
  deleteHooks(ids: [ID!]): [Hook]
  endSession: Boolean!
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

union AuthenticatedItem = User

type Query {
  """
   Search for all Role items which match the where clause.
  """
  allRoles(
    where: RoleWhereInput! = {}
    search: String
    sortBy: [SortRolesBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [RoleOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Role!]

  """
   Search for the Role item with the matching ID.
  """
  Role(where: RoleWhereUniqueInput!): Role

  """
   Perform a meta-query on all Role items which match the where clause.
  """
  _allRolesMeta(
    where: RoleWhereInput! = {}
    search: String
    sortBy: [SortRolesBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [RoleOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use rolesCount instead."
    )
  rolesCount(where: RoleWhereInput! = {}): Int

  """
   Search for all User items which match the where clause.
  """
  allUsers(
    where: UserWhereInput! = {}
    search: String
    sortBy: [SortUsersBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [UserOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [User!]

  """
   Search for the User item with the matching ID.
  """
  User(where: UserWhereUniqueInput!): User

  """
   Perform a meta-query on all User items which match the where clause.
  """
  _allUsersMeta(
    where: UserWhereInput! = {}
    search: String
    sortBy: [SortUsersBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [UserOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use usersCount instead."
    )
  usersCount(where: UserWhereInput! = {}): Int

  """
   Search for all List items which match the where clause.
  """
  allLists(
    where: ListWhereInput! = {}
    search: String
    sortBy: [SortListsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [ListOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [List!]

  """
   Search for the List item with the matching ID.
  """
  List(where: ListWhereUniqueInput!): List

  """
   Perform a meta-query on all List items which match the where clause.
  """
  _allListsMeta(
    where: ListWhereInput! = {}
    search: String
    sortBy: [SortListsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [ListOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use listsCount instead."
    )
  listsCount(where: ListWhereInput! = {}): Int

  """
   Search for all Field items which match the where clause.
  """
  allFields(
    where: FieldWhereInput! = {}
    search: String
    sortBy: [SortFieldsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [FieldOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Field!]

  """
   Search for the Field item with the matching ID.
  """
  Field(where: FieldWhereUniqueInput!): Field

  """
   Perform a meta-query on all Field items which match the where clause.
  """
  _allFieldsMeta(
    where: FieldWhereInput! = {}
    search: String
    sortBy: [SortFieldsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [FieldOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use fieldsCount instead."
    )
  fieldsCount(where: FieldWhereInput! = {}): Int

  """
   Search for all App items which match the where clause.
  """
  allApps(
    where: AppWhereInput! = {}
    search: String
    sortBy: [SortAppsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [AppOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [App!]

  """
   Search for the App item with the matching ID.
  """
  App(where: AppWhereUniqueInput!): App

  """
   Perform a meta-query on all App items which match the where clause.
  """
  _allAppsMeta(
    where: AppWhereInput! = {}
    search: String
    sortBy: [SortAppsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [AppOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use appsCount instead."
    )
  appsCount(where: AppWhereInput! = {}): Int

  """
   Search for all AccessControl items which match the where clause.
  """
  allAccessControls(
    where: AccessControlWhereInput! = {}
    search: String
    sortBy: [SortAccessControlsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [AccessControlOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [AccessControl!]

  """
   Search for the AccessControl item with the matching ID.
  """
  AccessControl(where: AccessControlWhereUniqueInput!): AccessControl

  """
   Perform a meta-query on all AccessControl items which match the where clause.
  """
  _allAccessControlsMeta(
    where: AccessControlWhereInput! = {}
    search: String
    sortBy: [SortAccessControlsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [AccessControlOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use accessControlsCount instead."
    )
  accessControlsCount(where: AccessControlWhereInput! = {}): Int

  """
   Search for all Hook items which match the where clause.
  """
  allHooks(
    where: HookWhereInput! = {}
    search: String
    sortBy: [SortHooksBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [HookOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Hook!]

  """
   Search for the Hook item with the matching ID.
  """
  Hook(where: HookWhereUniqueInput!): Hook

  """
   Perform a meta-query on all Hook items which match the where clause.
  """
  _allHooksMeta(
    where: HookWhereInput! = {}
    search: String
    sortBy: [SortHooksBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [HookOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use hooksCount instead."
    )
  hooksCount(where: HookWhereInput! = {}): Int
  authenticatedItem: AuthenticatedItem
  keystone: KeystoneMeta!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID!): KeystoneAdminUIFieldMetaItemView
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode!
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
