# Starter pipeline

# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
name: $(Build.DefinitionName)_$(SourceBranchName)_$(Date:yyyyMMdd)$(Rev:.r)
trigger:
- main

variables:
  DOCKER_REGISTRY: 'opensaas'
  TAG: $(Build.BuildNumber)

stages:
  - stage: Build
    pool:
      vmImage: ubuntu-latest
    
    jobs:
      - job: PackagesBuild
        displayName: Build and Release Packages
        steps:
          - task: npmAuthenticate@0
            displayName: Authenticate to Artifacts
            inputs:
              workingFile: './.npmrc'
          
          - task: NodeTool@0
            inputs:
              versionSpec: '14.17'
          
          - script: curl -f https://get.pnpm.io/v6.js | node - add --global pnpm@6
            displayName: Install pnpm
            
          - script: pnpm install
            displayName: install dependencies
          
          - template: pipeline/frontend-lint.yml
            parameters:
              frontendApps:
                - ks-frontend-demo
            
          - script: pnpm release
            displayName: 'Release Packages to Artifacts'
      
      - job: DockerBuildAndPush
        dependsOn: PackagesBuild
        displayName: Build and Push Docker Images
        steps:
          - task: npmAuthenticate@0
            displayName: Authenticate to Artifacts
            inputs:
              workingFile: './.npmrc'

          - task: Docker@2
            displayName: Docker Login
            inputs:
              containerRegistry: 'DockerHub'
              command: 'login'
            
          - task: DockerCompose@0
            displayName: Docker Compose Build
            inputs:
              containerregistrytype: 'Container Registry'
              dockerRegistryEndpoint: 'DockerHub'
              dockerComposeFile: '**/docker-compose.yml'
              action: 'Build services'
            
          - task: DockerCompose@0
            displayName: Docker Compose Push
            inputs:
              containerregistrytype: 'Container Registry'
              dockerRegistryEndpoint: 'DockerHub'
              dockerComposeFile: '**/docker-compose.yml'
              action: 'Push services'
          
          - task: HelmDeploy@0
            displayName: Package Helm Chart
            inputs:
              command: 'package'
              chartPath: '**/chart/demo-app'
          
          - task: CopyFiles@2
            displayName: Copy values files
            inputs:
              sourceFolder: '$(Build.SourcesDirectory)/chart/values'
              contents: '*.yaml'
              targetFolder: '$(Build.ArtifactStagingDirectory)/values'
          
          - task: PublishBuildArtifacts@1
            displayName: Publish Build Artifacts
            inputs:
              pathToPublish: '$(Build.ArtifactStagingDirectory)'
              artifactName: chart

  - stage: Test
    dependsOn: Build
    pool:
      vmImage: ubuntu-latest
    jobs:
    - deployment: Test
      displayName: Deploy to Test
      environment: Testing
      strategy:
        runOnce:
          deploy:
            steps:
            - task: DownloadBuildArtifacts@0
              displayName: Download values and chart
              inputs:
                buildType: 'current'
                downloadType: 'single'
                artifactName: 'chart'
                downloadPath: '$(System.ArtifactsDirectory)'

            - task: HelmDeploy@0
              displayName: Deploy to Test Environment
              inputs:
                connectionType: 'Kubernetes Service Connection'
                kubernetesServiceConnection: 'Keystone-Demo-demo-keystone-1624857112120'
                command: 'upgrade'
                namespace: 'demo-keystone'
                chartType: 'FilePath'
                chartPath: '$(System.ArtifactsDirectory)/chart/demo-app-0.1.0.tgz'
                releaseName: 'demo-app'
                valueFile: '$(System.ArtifactsDirectory)/chart/values/test.yaml'
                overrideValues: |
                  stripeKey=$(STRIPE_KEY_TEST)
                  backend.env.DATABASE_URL=$(DATABASE_URL_TEST)
                  backend.env.STRIPE_SECRET=$(STRIPE_SECRET_TEST)
                  backend.env.SENDGRID_API_KEY=$(SENDGRID_KEY)
                  backend.image.tag=$(TAG)
                  apps[0].image.tag=$(TAG)